package library;

public class Library {

	private Book[] books;
	public static void main(String[] args) {
		Library l = new Library(3);
		Author a1 = new Author("Miguel de Cervantes", 1547);
		Author a2 = new Author("Nikolai Gogol", 1809);
		l.setBook(1, "Don Quixote", a1);
		l.setBook(0, "Dead Souls", a2);
		l.setBook(0, "The Way Of Kings", new Author("Brandon Sanderson", 1970));
		l.setBook(2, "Words of Radiance", new Author("Wit", 1970));
		l.setBook(3, "Oathbringer", new Author("BrandoSando", 1970));
		System.out.println(l.getBook(1));
		System.out.println(l.getBook(0));		
		System.out.println(l.getBook(2));		
	
	}
	public Library(int size) {
		books = new Book[size];
	}

	public void setBook(int bookNum, String title, Author auth) {
		
		if(canSetBook(bookNum))
		{
			books[bookNum] = new Book(title, auth);
		}
		else System.out.println("Can't set book.");

	}

	public Book getBook(int bookNum) 
	{
		if(!isValidIndex(bookNum) || !isUsedIndex(bookNum)) return null;
		return books[bookNum];
	}
	
	/// Checks if a book can be added at this index.
	private boolean canSetBook(int index)
	{
		return (isValidIndex(index) && !isUsedIndex(index));
	}
	
	/// Checks if the index is valid, so we don't get an out of range exception
	private boolean isValidIndex(int index)
	{
//		if(index < 0 || index >= books.length)
//		{
//			System.out.println("Invalid index!\nOperation Cancelled.");
//			return false;
//		}
		return !(index < 0 || index >= books.length);
	}
	
	/// Checks if the index has already been used, as we don't want to overwrite any books.
	private boolean isUsedIndex(int index)
	{
//		if (books[index] != null) 
//		{
//			System.out.println("Index already used by another book!\nOperation Cancelled.");
//			return true;
//		}
		return (books[index] != null);
	}

}
